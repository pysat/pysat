# This workflow will install Python dependencies and the latest RC of pysat from
# test pypi. This test should be manually run before a pysat RC is officially
# approved and versioned. For more information see:
# https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Test install of latest RC from pip

on: [workflow_dispatch]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]
        python-version: ["3.11", "3.12"]
        numpy_ver: ["latest"]
        test_config: ["latest"]
        include:
          # NEP29 compliance settings
          - python-version: "3.10"
            numpy_ver: "1.23"
            os: ubuntu-latest
            test_config: "NEP29"
          # Operational compliance settings
          - python-version: "3.6.8"
            numpy_ver: "1.19.5"
            os: "ubuntu-20.04"
            test_config: "Ops"

    name: Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install standard dependencies
      if: ${{ matrix.test_config == 'latest'}}
      run: pip install -r requirements.txt

    - name: Install Operational dependencies
      if: ${{ matrix.test_config == 'Ops'}}
      run: |
        sudo apt-get update
        sudo apt-get install -y libhdf5-serial-dev
        sudo apt-get install -y libnetcdf-dev
        pip install numpy==${{ matrix.numpy_ver }}
        pip install -r requirements.txt
        pip install "pip<19.0"

    - name: Install NEP29 dependencies
      if: ${{ matrix.test_config == 'NEP29'}}
      run: |
        pip install numpy==${{ matrix.numpy_ver }}
        pip install --upgrade-strategy only-if-needed -r requirements.txt

    - name: Install pysat RC
      run: |
        pip -V
        python -c 'import sysconfig; print(sysconfig.get_paths()["purelib"])'
        python -m pip install --no-deps --pre -i https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ pysat

    - name: Set up pysat
      run: |
        mkdir pysatData
        python -c "import pysat; pysat.params['data_dirs'] = 'pysatData'"

    - name: Check that install imports correctly
      run: |
        cd pysatData
        python -c 'import sysconfig; print(sysconfig.get_paths()["purelib"])'
        python -c "import pysat; print(pysat.__version__)"
