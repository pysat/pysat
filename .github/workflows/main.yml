# This workflow will install Python dependencies, run tests and lint with a
# variety of Python versions. For more information see:
# https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Pytest with Flake8

on: [push, pull_request]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]
        python-version: ["3.11", "3.12"]
        numpy_ver: ["latest"]
        test_config: ["latest"]
        include:
          # SPEC0000 compliance settings
          - python-version: "3.10"
            numpy_ver: "1.24"
            pandas_ver: "1.5.0"
            scipy_ver: "1.10.0"
            xarray_ver: "2022.9.0"
            os: ubuntu-latest
            test_config: "SPEC0000"
          # Operational compliance settings
          - python-version: "3.9"
            numpy_ver: "1.23.5"
            os: "ubuntu-22.04"
            test_config: "Ops"

    name: Python ${{ matrix.python-version }} on ${{ matrix.os }} with numpy ${{ matrix.numpy_ver }}
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Operational dependencies
      if: ${{ matrix.test_config == 'Ops'}}
      run: |
        pip install numpy==${{ matrix.numpy_ver }}
        pip install --upgrade-strategy only-if-needed .[test]

    - name: Install SPEC0000 dependencies
      if: ${{ matrix.test_config == 'SPEC0000'}}
      run: |
        pip install numpy==${{ matrix.numpy_ver }}
        pip install pandas==${{ matrix.pandas_ver }}
        pip install scipy==${{ matrix.scipy_ver }}
        pip install xarray==${{ matrix.xarray_ver }}
        pip install --upgrade-strategy only-if-needed .[test]

    - name: Install standard dependencies
      if: ${{ matrix.test_config == 'latest'}}
      run: pip install .[test]

    - name: Set up pysat
      run: |
        mkdir pysatData
        python -c "import pysat; pysat.params['data_dirs'] = 'pysatData'"

    - name: Test PEP8 compliance
      run: flake8 . --count --select=D,E,F,H,W --show-source --statistics

    - name: Evaluate complexity
      run: flake8 . --count --exit-zero --max-complexity=10 --statistics

    - name: Test with pytest
      run: pytest --cov-report xml

    - name: Coveralls Parallel
      uses: coverallsapp/github-action@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        flag-name: run=${{ join(matrix.*, '-') }}
        parallel: true
        format: cobertura
        debug: true

  finish:
    name: Finish Coverage Analysis
    needs: build
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
    - name: Coveralls Finished
      uses: coverallsapp/github-action@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        parallel-finished: true
